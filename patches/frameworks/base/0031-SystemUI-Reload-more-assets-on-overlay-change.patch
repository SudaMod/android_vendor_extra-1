From 11d1e0f393eab520c90eae6b3486f974727ef9f4 Mon Sep 17 00:00:00 2001
From: Ivan Iskandar <ivan@prjkt.io>
Date: Sun, 11 Feb 2018 02:12:50 +0700
Subject: [PATCH 31/37] SystemUI: Reload more assets on overlay change

Complete the current feature of overlay change assets reloads
implemented with 987f1937a0231a2b6d09bf7c3bbb7df9de04d6b4
which miss the notification and other small bits in SystemUI
to be reloaded.

However, this commit will not fully eliminate the need of
SystemUI restart when changing framework or SystemUI overlay
since there is more undiscovered bits that can't/doesn't get
reloaded for some kind of overlay.

Change-Id: I451be5e6c65bf938706ae2a77aad1cef653c5ba5
Signed-off-by: Ivan Iskandar <ivan@prjkt.io>
---
 core/java/android/app/Notification.java       | 90 ++++++++++++-------
 .../ActivatableNotificationView.java          | 16 ++--
 .../statusbar/ExpandableNotificationRow.java  |  8 ++
 .../systemui/statusbar/NotificationShelf.java |  5 ++
 .../MediaNotificationProcessor.java           | 14 ++-
 .../phone/DarkIconDispatcherImpl.java         |  8 ++
 .../phone/NotificationPanelView.java          |  2 +
 .../systemui/statusbar/phone/StatusBar.java   | 24 +++++
 .../statusbar/policy/DarkIconDispatcher.java  |  3 +
 .../stack/NotificationStackScrollLayout.java  | 13 ++-
 10 files changed, 143 insertions(+), 40 deletions(-)

diff --git a/core/java/android/app/Notification.java b/core/java/android/app/Notification.java
index 4975f0e4b88..4e573ba7043 100644
--- a/core/java/android/app/Notification.java
+++ b/core/java/android/app/Notification.java
@@ -2741,7 +2741,11 @@ public class Notification implements Parcelable
          */
         private static final int LIGHTNESS_TEXT_DIFFERENCE_DARK = -10;
 
+        private static final String MEDIA_ARTWORK_COLORIZED_EXTRAS =
+                "notification.mediaArtworkColorized";
+
         private Context mContext;
+        private Context mThemeContext;
         private Notification mN;
         private Bundle mUserExtras = new Bundle();
         private Style mStyle;
@@ -2783,6 +2787,7 @@ public class Notification implements Parcelable
 
         private boolean mTintActionButtons;
         private boolean mInNightMode;
+        private boolean mAllowIconTextTint;
 
         /**
          * Constructs a new Builder with the defaults:
@@ -2814,9 +2819,18 @@ public class Notification implements Parcelable
          * @hide
          */
         public Builder(Context context, Notification toAdopt) {
+            this(context, toAdopt, context);
+        }
+
+        /**
+         * @hide
+         */
+        public Builder(Context context, Notification toAdopt, Context themeContext) {
             mContext = context;
-            Resources res = mContext.getResources();
+            mThemeContext = themeContext;
+            Resources res = mThemeContext.getResources();
             mTintActionButtons = res.getBoolean(R.bool.config_tintNotificationActionButtons);
+            mAllowIconTextTint = res.getBoolean(R.bool.config_allowNotificationIconTextTinting);
 
             if (res.getBoolean(R.bool.config_enableNightMode)) {
                 Configuration currentConfig = res.getConfiguration();
@@ -2877,11 +2891,25 @@ public class Notification implements Parcelable
 
         private NotificationColorUtil getColorUtil() {
             if (mColorUtil == null) {
-                mColorUtil = NotificationColorUtil.getInstance(mContext);
+                mColorUtil = NotificationColorUtil.getInstance(mThemeContext);
             }
             return mColorUtil;
         }
 
+        /**
+         * @hide
+         */
+        public void setArtworkColorizedExtras(boolean value) {
+            mN.extras.putBoolean(MEDIA_ARTWORK_COLORIZED_EXTRAS, true);
+        }
+
+        /**
+         * @hide
+         */
+        public boolean getArtworkColorizedExtras() {
+            return mN.extras.getBoolean(MEDIA_ARTWORK_COLORIZED_EXTRAS, false);
+        }
+
         /**
          * If this notification is duplicative of a Launcher shortcut, sets the
          * {@link ShortcutInfo#getId() id} of the shortcut, in case the Launcher wants to hide
@@ -3816,7 +3844,7 @@ public class Notification implements Parcelable
             if (badge == null) {
                 return null;
             }
-            final int size = mContext.getResources().getDimensionPixelSize(
+            final int size = mThemeContext.getResources().getDimensionPixelSize(
                     R.dimen.notification_badge_size);
             Bitmap bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
             Canvas canvas = new Canvas(bitmap);
@@ -3886,7 +3914,7 @@ public class Notification implements Parcelable
         }
 
         private RemoteViews applyStandardTemplate(int resId, StandardTemplateParams p) {
-            RemoteViews contentView = new BuilderRemoteViews(mContext.getApplicationInfo(), resId);
+            RemoteViews contentView = new BuilderRemoteViews(mThemeContext.getApplicationInfo(), resId);
 
             resetStandardTemplate(contentView);
 
@@ -3979,9 +4007,9 @@ public class Notification implements Parcelable
                     || mTextColorsAreForBackground != backgroundColor) {
                 mTextColorsAreForBackground = backgroundColor;
                 if (!hasForegroundColor() || !isColorized()) {
-                    mPrimaryTextColor = NotificationColorUtil.resolvePrimaryColor(mContext,
+                    mPrimaryTextColor = NotificationColorUtil.resolvePrimaryColor(mThemeContext,
                             backgroundColor);
-                    mSecondaryTextColor = NotificationColorUtil.resolveSecondaryColor(mContext,
+                    mSecondaryTextColor = NotificationColorUtil.resolveSecondaryColor(mThemeContext,
                             backgroundColor);
                     if (backgroundColor != COLOR_DEFAULT
                             && (mBackgroundColorHint != COLOR_INVALID || isColorized())) {
@@ -4049,7 +4077,7 @@ public class Notification implements Parcelable
                         }
                     }
                 }
-                mActionBarColor = NotificationColorUtil.resolveActionBarColor(mContext,
+                mActionBarColor = NotificationColorUtil.resolveActionBarColor(mThemeContext,
                         backgroundColor);
             }
         }
@@ -4074,7 +4102,7 @@ public class Notification implements Parcelable
             int minHeight = 0;
             if (hasMinHeight) {
                 // we need to set the minHeight of the notification
-                minHeight = mContext.getResources().getDimensionPixelSize(
+                minHeight = mThemeContext.getResources().getDimensionPixelSize(
                         com.android.internal.R.dimen.notification_min_content_height);
             }
             remoteView.setInt(R.id.notification_main_column, "setMinimumHeight", minHeight);
@@ -4089,7 +4117,7 @@ public class Notification implements Parcelable
                 contentView.setProgressBar(
                         R.id.progress, max, progress, ind);
                 contentView.setProgressBackgroundTintList(
-                        R.id.progress, ColorStateList.valueOf(mContext.getColor(
+                        R.id.progress, ColorStateList.valueOf(mThemeContext.getColor(
                                 R.color.notification_progress_background_color)));
                 if (mN.color != COLOR_DEFAULT) {
                     ColorStateList colorStateList = ColorStateList.valueOf(resolveContrastColor());
@@ -4339,7 +4367,7 @@ public class Notification implements Parcelable
                 } else if (isColorized()) {
                     big.setInt(R.id.actions, "setBackgroundColor", getActionBarColor());
                 } else {
-                    big.setInt(R.id.actions, "setBackgroundColor", mContext.getColor(
+                    big.setInt(R.id.actions, "setBackgroundColor", mThemeContext.getColor(
                             R.color.notification_action_list));
                 }
                 big.setViewLayoutMarginBottomDimen(R.id.notification_action_list_margin_target,
@@ -4468,7 +4496,7 @@ public class Notification implements Parcelable
         public RemoteViews makeNotificationHeader(boolean ambient) {
             Boolean colorized = (Boolean) mN.extras.get(EXTRA_COLORIZED);
             mN.extras.putBoolean(EXTRA_COLORIZED, false);
-            RemoteViews header = new BuilderRemoteViews(mContext.getApplicationInfo(),
+            RemoteViews header = new BuilderRemoteViews(mThemeContext.getApplicationInfo(),
                     ambient ? R.layout.notification_template_ambient_header
                             : R.layout.notification_template_header);
             resetNotificationHeader(header);
@@ -4585,7 +4613,7 @@ public class Notification implements Parcelable
             RemoteViews view;
             if (ambient) {
                 publicExtras.putCharSequence(EXTRA_TITLE,
-                        mContext.getString(com.android.internal.R.string.notification_hidden_text));
+                        mThemeContext.getString(com.android.internal.R.string.notification_hidden_text));
                 view = makeAmbientNotification();
             } else{
                 view = makeNotificationHeader(false /* ambient */);
@@ -4644,7 +4672,7 @@ public class Notification implements Parcelable
             }
             CharSequence contentText = mN.extras.getCharSequence(Notification.EXTRA_TEXT);
             if (titleText != null && contentText != null) {
-                summary.append(bidi.unicodeWrap(mContext.getText(
+                summary.append(bidi.unicodeWrap(mThemeContext.getText(
                         R.string.notification_header_divider_symbol_with_spaces)));
             }
             if (contentText != null) {
@@ -4656,7 +4684,7 @@ public class Notification implements Parcelable
         private RemoteViews generateActionButton(Action action, boolean emphazisedMode,
                 boolean oddAction, boolean ambient) {
             final boolean tombstone = (action.actionIntent == null);
-            RemoteViews button = new BuilderRemoteViews(mContext.getApplicationInfo(),
+            RemoteViews button = new BuilderRemoteViews(mThemeContext.getApplicationInfo(),
                     emphazisedMode ? getEmphasizedActionLayoutResource()
                             : tombstone ? getActionTombstoneLayoutResource()
                                     : getActionLayoutResource());
@@ -4674,7 +4702,7 @@ public class Notification implements Parcelable
                 if (isColorized()) {
                     bgColor = oddAction ? getActionBarColor() : getActionBarColorDeEmphasized();
                 } else {
-                    bgColor = mContext.getColor(oddAction ? R.color.notification_action_list
+                    bgColor = mThemeContext.getColor(oddAction ? R.color.notification_action_list
                             : R.color.notification_action_list_dark);
                 }
                 button.setDrawableParameters(R.id.button_holder, true, -1, bgColor,
@@ -4810,8 +4838,8 @@ public class Notification implements Parcelable
                 boolean ambient) {
             boolean colorable = !isLegacy() || getColorUtil().isGrayscaleIcon(mContext, smallIcon);
             int color;
-            if (!mContext.getResources().getBoolean(R.bool.config_allowNotificationIconTextTinting)) {
-                color = ambient ? resolveAmbientColor() : mContext.getColor(R.color.notification_icon_default_color);
+            if (!mAllowIconTextTint) {
+                color = ambient ? resolveAmbientColor() : mThemeContext.getColor(R.color.notification_icon_default_color);
             } else {
                 color = ambient ? resolveAmbientColor() : getPrimaryHighlightColor();
             }
@@ -4845,20 +4873,20 @@ public class Notification implements Parcelable
         }
 
         int getSenderTextColor() {
-            return mContext.getColor(R.color.sender_text_color);
+            return mThemeContext.getColor(R.color.sender_text_color);
         }
 
         int resolveIconContrastColor() {
-            if (!mContext.getResources().getBoolean(R.bool.config_allowNotificationIconTextTinting)) {
-                return mContext.getColor(R.color.notification_icon_default_color);
+            if (!mAllowIconTextTint) {
+                return mThemeContext.getColor(R.color.notification_icon_default_color);
             } else {
                 return resolveContrastColor();
             }
         }
 
         int resolveContrastColor() {
-            if (!mContext.getResources().getBoolean(R.bool.config_allowNotificationIconTextTinting)) {
-                return mContext.getColor(R.color.notification_text_default_color);
+            if (!mAllowIconTextTint) {
+                return mThemeContext.getColor(R.color.notification_text_default_color);
             }
 
             if (mCachedContrastColorIsFor == mN.color && mCachedContrastColor != COLOR_INVALID) {
@@ -4868,16 +4896,16 @@ public class Notification implements Parcelable
             int color;
             int background = mBackgroundColorHint;
             if (mBackgroundColorHint == COLOR_INVALID) {
-                background = mContext.getColor(
+                background = mThemeContext.getColor(
                         com.android.internal.R.color.notification_material_background_color);
             }
             if (mN.color == COLOR_DEFAULT) {
                 ensureColors();
                 color = mSecondaryTextColor;
             } else {
-                boolean isDark = mInNightMode || mContext.getResources()
+                boolean isDark = mInNightMode || mThemeContext.getResources()
                         .getBoolean(R.bool.config_useDarkBgNotificationIconTextTinting);
-                color = NotificationColorUtil.resolveContrastColor(mContext, mN.color,
+                color = NotificationColorUtil.resolveContrastColor(mThemeContext, mN.color,
                         background, isDark);
             }
             if (Color.alpha(color) < 255) {
@@ -4892,7 +4920,7 @@ public class Notification implements Parcelable
             if (mCachedAmbientColorIsFor == mN.color && mCachedAmbientColorIsFor != COLOR_INVALID) {
                 return mCachedAmbientColor;
             }
-            final int contrasted = NotificationColorUtil.resolveAmbientColor(mContext, mN.color);
+            final int contrasted = NotificationColorUtil.resolveAmbientColor(mThemeContext, mN.color);
 
             mCachedAmbientColorIsFor = mN.color;
             return mCachedAmbientColor = contrasted;
@@ -4940,7 +4968,7 @@ public class Notification implements Parcelable
                 builderContext = context; // try with given context
             }
 
-            return new Builder(builderContext, n);
+            return new Builder(builderContext, n, context);
         }
 
         /**
@@ -6049,7 +6077,7 @@ public class Notification implements Parcelable
             if (!TextUtils.isEmpty(mConversationTitle)) {
                 if (!TextUtils.isEmpty(sender)) {
                     BidiFormatter bidi = BidiFormatter.getInstance();
-                    title = mBuilder.mContext.getString(
+                    title = mBuilder.mThemeContext.getString(
                             com.android.internal.R.string.notification_messaging_title_template,
                             bidi.unicodeWrap(mConversationTitle), bidi.unicodeWrap(m.mSender));
                 } else {
@@ -6554,7 +6582,7 @@ public class Notification implements Parcelable
             }
 
             int i=0;
-            int topPadding = mBuilder.mContext.getResources().getDimensionPixelSize(
+            int topPadding = mBuilder.mThemeContext.getResources().getDimensionPixelSize(
                     R.dimen.notification_inbox_item_top_padding);
             boolean first = true;
             int onlyViewId = 0;
@@ -6582,7 +6610,7 @@ public class Notification implements Parcelable
             }
             if (onlyViewId != 0) {
                 // We only have 1 entry, lets make it look like the normal Text of a Bigtext
-                topPadding = mBuilder.mContext.getResources().getDimensionPixelSize(
+                topPadding = mBuilder.mThemeContext.getResources().getDimensionPixelSize(
                         R.dimen.notification_text_margin_top);
                 contentView.setViewPadding(onlyViewId, 0, topPadding, 0, 0);
             }
@@ -6763,7 +6791,7 @@ public class Notification implements Parcelable
             // notification color. Otherwise, just use the passed-in color.
             int tintColor = mBuilder.shouldTintActionButtons() || mBuilder.isColorized()
                     ? color
-                    : NotificationColorUtil.resolveColor(mBuilder.mContext,
+                    : NotificationColorUtil.resolveColor(mBuilder.mThemeContext,
                             Notification.COLOR_DEFAULT);
 
             button.setDrawableParameters(R.id.action0, false, -1, tintColor,
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/ActivatableNotificationView.java b/packages/SystemUI/src/com/android/systemui/statusbar/ActivatableNotificationView.java
index 68fe9a83c70..54665f4177c 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/ActivatableNotificationView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/ActivatableNotificationView.java
@@ -98,9 +98,9 @@ public abstract class ActivatableNotificationView extends ExpandableOutlineView
             = new PathInterpolator(0.6f, 0, 0.5f, 1);
     private static final Interpolator ACTIVATE_INVERSE_ALPHA_INTERPOLATOR
             = new PathInterpolator(0, 0, 0.5f, 1);
-    private final int mTintedRippleColor;
-    private final int mLowPriorityRippleColor;
-    protected final int mNormalRippleColor;
+    private int mTintedRippleColor;
+    private int mLowPriorityRippleColor;
+    protected int mNormalRippleColor;
     private final AccessibilityManager mAccessibilityManager;
     private final DoubleTapHelper mDoubleTapHelper;
 
@@ -133,8 +133,8 @@ public abstract class ActivatableNotificationView extends ExpandableOutlineView
     private ValueAnimator mBackgroundColorAnimator;
     private float mAppearAnimationFraction = -1.0f;
     private float mAppearAnimationTranslation;
-    private final int mNormalColor;
-    private final int mLowPriorityColor;
+    private int mNormalColor;
+    private int mLowPriorityColor;
     private boolean mIsBelowSpeedBump;
     private FalsingManager mFalsingManager;
 
@@ -228,6 +228,12 @@ public abstract class ActivatableNotificationView extends ExpandableOutlineView
      * be useful in a configuration change.
      */
     protected void initBackground() {
+        mNormalColor = mContext.getColor(R.color.notification_material_background_color);
+        mLowPriorityColor = mContext.getColor(
+                R.color.notification_material_background_low_priority_color);
+        mTintedRippleColor = mContext.getColor(R.color.notification_ripple_tinted_color);
+        mLowPriorityRippleColor = mContext.getColor(R.color.notification_ripple_color_low_priority);
+        mNormalRippleColor = mContext.getColor(R.color.notification_ripple_untinted_color);
         mBackgroundNormal.setCustomBackground(R.drawable.notification_material_bg);
         mBackgroundDimmed.setCustomBackground(R.drawable.notification_material_bg_dim);
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/ExpandableNotificationRow.java b/packages/SystemUI/src/com/android/systemui/statusbar/ExpandableNotificationRow.java
index 966e7899724..977f0d48311 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/ExpandableNotificationRow.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/ExpandableNotificationRow.java
@@ -875,6 +875,14 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
     @Override
     public void onDensityOrFontScaleChanged() {
         super.onDensityOrFontScaleChanged();
+        onDensityFontScaleOrOverlayChanged();
+    }
+
+    public void onOverlayChanged() {
+        onDensityFontScaleOrOverlayChanged();
+    }
+
+    public void onDensityFontScaleOrOverlayChanged() {
         initDimens();
         initBackground();
         // Let's update our childrencontainer. This is intentionally not guarded with
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/NotificationShelf.java b/packages/SystemUI/src/com/android/systemui/statusbar/NotificationShelf.java
index 5557dde7a5d..630b6c0d7a8 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/NotificationShelf.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/NotificationShelf.java
@@ -146,6 +146,11 @@ public class NotificationShelf extends ActivatableNotificationView implements
         }
     }
 
+    public void onOverlayChanged() {
+        initDimens();
+        initBackground();
+    }
+
     @Override
     protected void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/MediaNotificationProcessor.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/MediaNotificationProcessor.java
index 80854ec42c4..b23fbcf185e 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/MediaNotificationProcessor.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/MediaNotificationProcessor.java
@@ -21,6 +21,7 @@ import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
+import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.Icon;
 import android.support.annotation.VisibleForTesting;
@@ -151,9 +152,16 @@ public class MediaNotificationProcessor {
                         : R.color.notification_material_background_color;
                 backgroundColor = mContext.getColor(id);
             }
-            Bitmap colorized = mColorizer.colorize(drawable, backgroundColor,
-                    mContext.getResources().getConfiguration().getLayoutDirection() ==
-                            LayoutDirection.RTL);
+            Bitmap colorized;
+            // prevent the artwork to be recolored on reinflation
+            if (!builder.getArtworkColorizedExtras()) {
+                colorized = mColorizer.colorize(drawable, backgroundColor,
+                        mContext.getResources().getConfiguration().getLayoutDirection() ==
+                                LayoutDirection.RTL);
+                builder.setArtworkColorizedExtras(true);
+            } else {
+                colorized = ((BitmapDrawable) drawable).getBitmap();
+            }
             builder.setLargeIcon(Icon.createWithBitmap(colorized));
         }
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/DarkIconDispatcherImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/DarkIconDispatcherImpl.java
index 3f9ae802314..8fe61254a43 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/DarkIconDispatcherImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/DarkIconDispatcherImpl.java
@@ -103,4 +103,12 @@ public class DarkIconDispatcherImpl implements DarkIconDispatcher {
             mReceivers.valueAt(i).onDarkChanged(mTintArea, mDarkIntensity, mIconTint);
         }
     }
+
+    public void onOverlayChanged(Context context) {
+        mDarkModeIconColorSingleTone = context.getColor(R.color.dark_mode_icon_color_single_tone);
+        mLightModeIconColorSingleTone = context.getColor(R.color.light_mode_icon_color_single_tone);
+        mIconTint = (int) ArgbEvaluator.getInstance().evaluate(mDarkIntensity,
+                mLightModeIconColorSingleTone, mDarkModeIconColorSingleTone);
+        applyIconTint();
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java
index 5403879c2a2..77d36fdbc8e 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java
@@ -363,6 +363,8 @@ public class NotificationPanelView extends PanelView implements
     }
 
     public void onOverlayChanged() {
+        mQsNavbarScrim.setBackground(getResources().getDrawable(R.drawable.qs_navbar_scrim));
+
         // Re-inflate the status view group.
         int index = indexOfChild(mKeyguardStatusView);
         removeView(mKeyguardStatusView);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index ddfc6d06629..32964cc92e4 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -1473,6 +1473,16 @@ public class StatusBar extends SystemUI implements DemoMode,
         reevaluateStyles();
     }
 
+    @Override
+    public void onOverlayChanged() {
+        reinflateViews();
+        updateNotificationsOnOverlayChanged();
+        mStackScroller.onOverlayChanged();
+        mNotificationShelf.onOverlayChanged();
+        mNotificationPanel.onOverlayChanged();
+        Dependency.get(DarkIconDispatcher.class).onOverlayChanged(mContext);
+    }
+
     private void reinflateViews() {
         reevaluateStyles();
 
@@ -1523,6 +1533,20 @@ public class StatusBar extends SystemUI implements DemoMode,
         }
     }
 
+    private void updateNotificationsOnOverlayChanged() {
+        ArrayList<Entry> activeNotifications = mNotificationData.getActiveNotifications();
+        for (int i = 0; i < activeNotifications.size(); i++) {
+            Entry entry = activeNotifications.get(i);
+            boolean exposedGuts = mNotificationGutsExposed != null
+                    && entry.row.getGuts() == mNotificationGutsExposed;
+            entry.row.onOverlayChanged();
+            if (exposedGuts) {
+                mNotificationGutsExposed = entry.row.getGuts();
+                bindGuts(entry.row, mGutsMenuItem);
+            }
+        }
+    }
+
     private void inflateSignalClusters() {
         if (mKeyguardStatusBar != null) reinflateSignalCluster(mKeyguardStatusBar);
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/DarkIconDispatcher.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/DarkIconDispatcher.java
index 58944c6ad57..6a5b9c4f409 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/DarkIconDispatcher.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/DarkIconDispatcher.java
@@ -14,6 +14,7 @@
 
 package com.android.systemui.statusbar.policy;
 
+import android.content.Context;
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.view.View;
@@ -37,6 +38,8 @@ public interface DarkIconDispatcher {
     // addDarkReceiver.
     void applyDark(ImageView object);
 
+    void onOverlayChanged(Context context);
+
     int DEFAULT_ICON_TINT = Color.WHITE;
     Rect sTmpRect = new Rect();
     int[] sTmpInt2 = new int[2];
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/stack/NotificationStackScrollLayout.java b/packages/SystemUI/src/com/android/systemui/statusbar/stack/NotificationStackScrollLayout.java
index 75532d9e09b..ff070939eb5 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/stack/NotificationStackScrollLayout.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/stack/NotificationStackScrollLayout.java
@@ -127,7 +127,7 @@ public class NotificationStackScrollLayout extends ViewGroup
     private boolean mSwipingInProgress;
     private int mCurrentStackHeight = Integer.MAX_VALUE;
     private final Paint mBackgroundPaint = new Paint();
-    private final boolean mShouldDrawNotificationBackground;
+    private boolean mShouldDrawNotificationBackground;
 
     private float mExpandedHeight;
     private int mOwnScrollY;
@@ -1291,6 +1291,17 @@ public class NotificationStackScrollLayout extends ViewGroup
         }
     }
 
+    public void onOverlayChanged() {
+        mBgColor = getContext().getColor(R.color.notification_shade_background_color);
+        mShouldDrawNotificationBackground =
+                getContext().getResources().getBoolean(R.bool.config_drawNotificationBackground);
+        mFadeNotificationsOnDismiss =
+                getContext().getResources().getBoolean(R.bool.config_fadeNotificationsOnDismiss);
+        initView(getContext());
+        updateWillNotDraw();
+        updateBackgroundDimming();
+    }
+
     @Override
     protected void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
-- 
2.18.0

