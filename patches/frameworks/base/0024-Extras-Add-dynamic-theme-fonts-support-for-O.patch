From bcfd49b5239d26aec5625888f5a63cf4917d596d Mon Sep 17 00:00:00 2001
From: d34d <clark@cyngn.com>
Date: Sat, 16 Sep 2017 03:15:37 +0000
Subject: [PATCH 24/37] Extras: Add dynamic theme fonts support for O

Change-Id: I10993906384cef97e10063399f3447c78d1959df
Signed-off-by: Ivan Iskandar <ivan@prjkt.io>
Signed-off-by: Harsh Shandilya <msfjarvis@gmail.com>
---
 core/java/android/app/ActivityThread.java     |  15 +-
 .../java/android/content/pm/ActivityInfo.java |   5 +
 .../android/content/res/Configuration.java    |   6 +-
 core/java/android/os/Process.java             |  10 +-
 core/java/android/os/ZygoteProcess.java       |  11 +-
 core/java/android/text/FontConfig.java        |  17 +-
 .../android/internal/os/ZygoteConnection.java |  12 ++
 .../java/android/graphics/FontListParser.java |  55 ++++--
 graphics/java/android/graphics/Typeface.java  | 175 ++++++++++++++++--
 .../server/am/ActivityManagerService.java     |  14 +-
 10 files changed, 268 insertions(+), 52 deletions(-)

diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index 45f7eba2af0..b3a7b4b3033 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -51,6 +51,7 @@ import android.database.sqlite.SQLiteDebug;
 import android.database.sqlite.SQLiteDebug.DbStats;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.Typeface;
 import android.hardware.display.DisplayManagerGlobal;
 import android.net.ConnectivityManager;
 import android.net.IConnectivityManager;
@@ -5090,11 +5091,15 @@ public final class ActivityThread {
         if (configDiff != 0) {
             // Ask text layout engine to free its caches if there is a locale change
             boolean hasLocaleConfigChange = ((configDiff & ActivityInfo.CONFIG_LOCALE) != 0);
-            if (hasLocaleConfigChange) {
-                Canvas.freeTextLayoutCaches();
-                if (DEBUG_CONFIGURATION) Slog.v(TAG, "Cleared TextLayout Caches");
-            }
-        }
+            boolean hasFontConfigChange = ((configDiff & ActivityInfo.CONFIG_THEME_FONT) != 0);
+            if (hasLocaleConfigChange || hasFontConfigChange) {
+                 Canvas.freeTextLayoutCaches();
+                if (hasFontConfigChange) {
+                    Typeface.recreateDefaults();
+                }
+                 if (DEBUG_CONFIGURATION) Slog.v(TAG, "Cleared TextLayout Caches");
+             }
+         }
     }
 
     /**
diff --git a/core/java/android/content/pm/ActivityInfo.java b/core/java/android/content/pm/ActivityInfo.java
index e0c3f75e223..cbd421ac3c6 100644
--- a/core/java/android/content/pm/ActivityInfo.java
+++ b/core/java/android/content/pm/ActivityInfo.java
@@ -756,6 +756,11 @@ public class ActivityInfo extends ComponentInfo
      * {@link android.R.attr#configChanges} attribute.
      */
     public static final int CONFIG_LAYOUT_DIRECTION = 0x2000;
+    /**
+     * Bit in {@link #configChanges} that indicates a font change occurred
+     * @hide
+     */
+    public static final int CONFIG_THEME_FONT = 0x200000;
     /**
      * Bit in {@link #configChanges} that indicates that the activity
      * can itself handle the change to the display color gamut or dynamic
diff --git a/core/java/android/content/res/Configuration.java b/core/java/android/content/res/Configuration.java
index f7cccd56f07..5995bda302c 100644
--- a/core/java/android/content/res/Configuration.java
+++ b/core/java/android/content/res/Configuration.java
@@ -1112,6 +1112,7 @@ public final class Configuration implements Parcelable, Comparable<Configuration
         int changed = 0;
         if (delta.fontScale > 0 && fontScale != delta.fontScale) {
             changed |= ActivityInfo.CONFIG_FONT_SCALE;
+            changed |= ActivityInfo.CONFIG_THEME_FONT;
             fontScale = delta.fontScale;
         }
         if (delta.mcc != 0 && mcc != delta.mcc) {
@@ -1277,6 +1278,7 @@ public final class Configuration implements Parcelable, Comparable<Configuration
         }
         if (delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq) {
             changed |= ActivityInfo.CONFIG_ASSETS_PATHS;
+            changed |= ActivityInfo.CONFIG_THEME_FONT;
             assetsSeq = delta.assetsSeq;
         }
         if (delta.seq != 0) {
@@ -1342,6 +1344,7 @@ public final class Configuration implements Parcelable, Comparable<Configuration
         int changed = 0;
         if ((compareUndefined || delta.fontScale > 0) && fontScale != delta.fontScale) {
             changed |= ActivityInfo.CONFIG_FONT_SCALE;
+            changed |= ActivityInfo.CONFIG_THEME_FONT;
         }
         if ((compareUndefined || delta.mcc != 0) && mcc != delta.mcc) {
             changed |= ActivityInfo.CONFIG_MCC;
@@ -1431,6 +1434,7 @@ public final class Configuration implements Parcelable, Comparable<Configuration
         if ((compareUndefined || delta.assetsSeq != ASSETS_SEQ_UNDEFINED)
                 && assetsSeq != delta.assetsSeq) {
             changed |= ActivityInfo.CONFIG_ASSETS_PATHS;
+            changed |= ActivityInfo.CONFIG_THEME_FONT;
         }
 
         // Make sure that one of the values is not null and that they are not equal.
@@ -1462,7 +1466,7 @@ public final class Configuration implements Parcelable, Comparable<Configuration
         // CONFIG_ASSETS_PATHS and CONFIG_FONT_SCALE are higher level configuration changes that
         // all resources are subject to change with.
         interestingChanges = interestingChanges | ActivityInfo.CONFIG_ASSETS_PATHS
-                | ActivityInfo.CONFIG_FONT_SCALE;
+                | ActivityInfo.CONFIG_FONT_SCALE | ActivityInfo.CONFIG_THEME_FONT;
         return (configChanges & interestingChanges) != 0;
     }
 
diff --git a/core/java/android/os/Process.java b/core/java/android/os/Process.java
index db195d572fc..0bd680e0270 100644
--- a/core/java/android/os/Process.java
+++ b/core/java/android/os/Process.java
@@ -458,10 +458,11 @@ public class Process {
                                   String instructionSet,
                                   String appDataDir,
                                   String invokeWith,
-                                  String[] zygoteArgs) {
+                                  String[] zygoteArgs,
+                                  boolean refreshFont) {
         return zygoteProcess.start(processClass, niceName, uid, gid, gids,
                     debugFlags, mountExternal, targetSdkVersion, seInfo,
-                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);
+                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs, refreshFont);
     }
 
     /** @hide */
@@ -475,10 +476,11 @@ public class Process {
                                   String instructionSet,
                                   String appDataDir,
                                   String invokeWith,
-                                  String[] zygoteArgs) {
+                                  String[] zygoteArgs,
+                                  boolean refreshFont) {
         return WebViewZygote.getProcess().start(processClass, niceName, uid, gid, gids,
                     debugFlags, mountExternal, targetSdkVersion, seInfo,
-                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);
+                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs, refreshFont);
     }
 
     /**
diff --git a/core/java/android/os/ZygoteProcess.java b/core/java/android/os/ZygoteProcess.java
index 7a13ee89d39..11f9918a6b4 100644
--- a/core/java/android/os/ZygoteProcess.java
+++ b/core/java/android/os/ZygoteProcess.java
@@ -203,11 +203,12 @@ public class ZygoteProcess {
                                                   String instructionSet,
                                                   String appDataDir,
                                                   String invokeWith,
-                                                  String[] zygoteArgs) {
+                                                  String[] zygoteArgs,
+                                                  boolean refreshFont) {
         try {
             return startViaZygote(processClass, niceName, uid, gid, gids,
                     debugFlags, mountExternal, targetSdkVersion, seInfo,
-                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);
+                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs, refreshFont);
         } catch (ZygoteStartFailedEx ex) {
             Log.e(LOG_TAG,
                     "Starting VM process through Zygote failed");
@@ -338,7 +339,8 @@ public class ZygoteProcess {
                                                       String instructionSet,
                                                       String appDataDir,
                                                       String invokeWith,
-                                                      String[] extraArgs)
+                                                      String[] extraArgs,
+                                                      boolean refreshFont)
                                                       throws ZygoteStartFailedEx {
         ArrayList<String> argsForZygote = new ArrayList<String>();
 
@@ -382,6 +384,9 @@ public class ZygoteProcess {
             argsForZygote.add("--mount-external-write");
         }
         argsForZygote.add("--target-sdk-version=" + targetSdkVersion);
+        if (refreshFont) {
+            argsForZygote.add("--refresh-font");
+        }
 
         // --setgroups is a comma-separated list
         if (gids != null && gids.length > 0) {
diff --git a/core/java/android/text/FontConfig.java b/core/java/android/text/FontConfig.java
index ed583907123..ca4337e81ca 100644
--- a/core/java/android/text/FontConfig.java
+++ b/core/java/android/text/FontConfig.java
@@ -25,6 +25,7 @@ import android.graphics.fonts.FontVariationAxis;
 import android.net.Uri;
 
 import java.lang.annotation.Retention;
+import java.util.List;
 
 
 /**
@@ -32,10 +33,10 @@ import java.lang.annotation.Retention;
  * @hide
  */
 public final class FontConfig {
-    private final @NonNull Family[] mFamilies;
-    private final @NonNull Alias[] mAliases;
+    private final @NonNull List<Family> mFamilies;
+    private final @NonNull List<Alias> mAliases;
 
-    public FontConfig(@NonNull Family[] families, @NonNull Alias[] aliases) {
+    public FontConfig(@NonNull List<Family> families, @NonNull List<Alias> aliases) {
         mFamilies = families;
         mAliases = aliases;
     }
@@ -43,14 +44,14 @@ public final class FontConfig {
     /**
      * Returns the ordered list of families included in the system fonts.
      */
-    public @NonNull Family[] getFamilies() {
+    public @NonNull List<Family> getFamilies() {
         return mFamilies;
     }
 
     /**
      * Returns the list of aliases defined for the font families in the system fonts.
      */
-    public @NonNull Alias[] getAliases() {
+    public @NonNull List<Alias> getAliases() {
         return mAliases;
     }
 
@@ -167,7 +168,7 @@ public final class FontConfig {
      * Class that holds information about a Font family.
      */
     public static final class Family {
-        private final @NonNull String mName;
+        private String mName;
         private final @NonNull Font[] mFonts;
         private final @NonNull String mLanguage;
 
@@ -211,6 +212,10 @@ public final class FontConfig {
             mVariant = variant;
         }
 
+        public void clearName() {
+            mName = null;
+        }
+
         /**
          * Returns the name given by the system to this font family.
          */
diff --git a/core/java/com/android/internal/os/ZygoteConnection.java b/core/java/com/android/internal/os/ZygoteConnection.java
index 9fa3239b60c..52a4877046c 100644
--- a/core/java/com/android/internal/os/ZygoteConnection.java
+++ b/core/java/com/android/internal/os/ZygoteConnection.java
@@ -26,6 +26,7 @@ import static com.android.internal.os.ZygoteConnectionConstants.CONNECTION_TIMEO
 import static com.android.internal.os.ZygoteConnectionConstants.MAX_ZYGOTE_ARGC;
 import static com.android.internal.os.ZygoteConnectionConstants.WRAPPED_PID_TIMEOUT_MILLIS;
 
+import android.graphics.Typeface;
 import android.net.Credentials;
 import android.net.LocalSocket;
 import android.os.FactoryTest;
@@ -191,6 +192,10 @@ class ZygoteConnection {
             }
         }
 
+        if (parsedArgs.refreshFont) {
+            Typeface.recreateDefaults();
+        }
+
         /**
          * In order to avoid leaking descriptors to the Zygote child,
          * the native code must close the two Zygote socket descriptors
@@ -416,6 +421,11 @@ class ZygoteConnection {
          */
         boolean preloadDefault;
 
+        /**
+         * Whether to refresh displayed font
+         */
+        boolean refreshFont;
+
         /**
          * Constructs instance and parses args
          * @param args zygote command-line args
@@ -582,6 +592,8 @@ class ZygoteConnection {
                     preloadPackageCacheKey = args[++curArg];
                 } else if (arg.equals("--preload-default")) {
                     preloadDefault = true;
+                } else if (arg.equals("--refresh-font")) {
+                    refreshFont = true;
                 } else {
                     break;
                 }
diff --git a/graphics/java/android/graphics/FontListParser.java b/graphics/java/android/graphics/FontListParser.java
index 7c07a302dfe..dd1f7fa3c92 100644
--- a/graphics/java/android/graphics/FontListParser.java
+++ b/graphics/java/android/graphics/FontListParser.java
@@ -26,6 +26,9 @@ import org.xmlpull.v1.XmlPullParserException;
 import android.annotation.Nullable;
 import com.android.internal.annotations.VisibleForTesting;
 
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -40,39 +43,59 @@ import java.util.regex.Pattern;
 public class FontListParser {
 
     /* Parse fallback list (no names) */
-    public static FontConfig parse(InputStream in) throws XmlPullParserException, IOException {
+    public static FontConfig parse(File configFilename, String fontDir) throws XmlPullParserException, IOException {
+        FileInputStream in = null;
+        in = new FileInputStream(configFilename);
+        return FontListParser.parse(in, fontDir);
+    }
+
+    /* Parse fallback list (no names) */
+    public static FontConfig parse(InputStream in, String fontDir)
+            throws XmlPullParserException, IOException {
+        BufferedInputStream bis = null;
         try {
-            XmlPullParser parser = Xml.newPullParser();
-            parser.setInput(in, null);
-            parser.nextTag();
-            return readFamilies(parser);
+            // wrap input stream in a BufferedInputStream, if it's not already, for mark support
+            if (!(in instanceof BufferedInputStream)) {
+                bis = new BufferedInputStream(in);
+            } else {
+                bis = (BufferedInputStream) in;
+            }
+            // mark the beginning so we can reset to this position after checking format
+            bis.mark(in.available());
+            return parseNormalFormat(bis, fontDir);
         } finally {
-            in.close();
+            if (bis != null) bis.close();
         }
     }
 
-    private static FontConfig readFamilies(XmlPullParser parser)
+    public static FontConfig parseNormalFormat(InputStream in, String dirName)
+            throws XmlPullParserException, IOException {
+        XmlPullParser parser = Xml.newPullParser();
+        parser.setInput(in, null);
+        parser.nextTag();
+        return readFamilies(parser, dirName);
+    }
+
+    private static FontConfig readFamilies(XmlPullParser parser, String dirPath)
             throws XmlPullParserException, IOException {
         List<FontConfig.Family> families = new ArrayList<>();
         List<FontConfig.Alias> aliases = new ArrayList<>();
-
         parser.require(XmlPullParser.START_TAG, null, "familyset");
         while (parser.next() != XmlPullParser.END_TAG) {
             if (parser.getEventType() != XmlPullParser.START_TAG) continue;
             String tag = parser.getName();
             if (tag.equals("family")) {
-                families.add(readFamily(parser));
+                families.add(readFamily(parser, dirPath));
             } else if (tag.equals("alias")) {
                 aliases.add(readAlias(parser));
             } else {
                 skip(parser);
             }
         }
-        return new FontConfig(families.toArray(new FontConfig.Family[families.size()]),
-                aliases.toArray(new FontConfig.Alias[aliases.size()]));
+        return new FontConfig(families, aliases);
     }
 
-    private static FontConfig.Family readFamily(XmlPullParser parser)
+    private static FontConfig.Family readFamily(XmlPullParser parser, String dirPath)
             throws XmlPullParserException, IOException {
         String name = parser.getAttributeValue(null, "name");
         String lang = parser.getAttributeValue(null, "lang");
@@ -82,7 +105,7 @@ public class FontListParser {
             if (parser.getEventType() != XmlPullParser.START_TAG) continue;
             String tag = parser.getName();
             if (tag.equals("font")) {
-                fonts.add(readFont(parser));
+                fonts.add(readFont(parser, dirPath));
             } else {
                 skip(parser);
             }
@@ -103,7 +126,7 @@ public class FontListParser {
     private static final Pattern FILENAME_WHITESPACE_PATTERN =
             Pattern.compile("^[ \\n\\r\\t]+|[ \\n\\r\\t]+$");
 
-    private static FontConfig.Font readFont(XmlPullParser parser)
+    private static FontConfig.Font readFont(XmlPullParser parser, String dirPath)
             throws XmlPullParserException, IOException {
         String indexStr = parser.getAttributeValue(null, "index");
         int index = indexStr == null ? 0 : Integer.parseInt(indexStr);
@@ -124,7 +147,9 @@ public class FontListParser {
                 skip(parser);
             }
         }
-        String sanitizedName = FILENAME_WHITESPACE_PATTERN.matcher(filename).replaceAll("");
+
+        String sanitizedName = dirPath + File.separatorChar +
+                FILENAME_WHITESPACE_PATTERN.matcher(filename).replaceAll("");
         return new FontConfig.Font(sanitizedName, index,
                 axes.toArray(new FontVariationAxis[axes.size()]), weight, isItalic);
     }
diff --git a/graphics/java/android/graphics/Typeface.java b/graphics/java/android/graphics/Typeface.java
index c4b56c333c6..46cf506813d 100644
--- a/graphics/java/android/graphics/Typeface.java
+++ b/graphics/java/android/graphics/Typeface.java
@@ -38,6 +38,7 @@ import android.os.ResultReceiver;
 import android.provider.FontRequest;
 import android.provider.FontsContract;
 import android.text.FontConfig;
+import android.text.FontConfig.Family;
 import android.util.Base64;
 import android.util.Log;
 import android.util.LongSparseArray;
@@ -110,6 +111,7 @@ public class Typeface {
     private static final Object sLock = new Object();
 
     static final String FONTS_CONFIG = "fonts.xml";
+    static final String SANS_SERIF_FAMILY_NAME = "sans-serif";
 
     /**
      * @hide
@@ -137,6 +139,13 @@ public class Typeface {
     private int[] mSupportedAxes;
     private static final int[] EMPTY_AXES = {};
 
+    // Typefaces that we can garbage collect when changing fonts, and so we don't break public APIs
+    private static Typeface DEFAULT_INTERNAL;
+    private static Typeface DEFAULT_BOLD_INTERNAL;
+    private static Typeface SANS_SERIF_INTERNAL;
+    private static Typeface SERIF_INTERNAL;
+    private static Typeface MONOSPACE_INTERNAL;
+
     private static void setDefault(Typeface t) {
         sDefaultTypeface = t;
         nativeSetDefault(t.native_instance);
@@ -889,7 +898,7 @@ public class Typeface {
             Map<String, ByteBuffer> bufferForPath) {
         FontFamily fontFamily = new FontFamily(family.getLanguage(), family.getVariant());
         for (FontConfig.Font font : family.getFonts()) {
-            String fullPathName = "/system/fonts/" + font.getFontName();
+            String fullPathName = font.getFontName();
             ByteBuffer fontBuffer = bufferForPath.get(fullPathName);
             if (fontBuffer == null) {
                 try (FileInputStream file = new FileInputStream(fullPathName)) {
@@ -916,6 +925,73 @@ public class Typeface {
         return fontFamily;
     }
 
+    /**
+     * Adds the family from src with the name familyName as a fallback font in dst
+     * @param src Source font config
+     * @param dst Destination font config
+     * @param familyName Name of family to add as a fallback
+     */
+    private static void addFallbackFontsForFamilyName(FontConfig src,
+            FontConfig dst, String familyName) {
+        for (Family srcFamily : src.getFamilies()) {
+            if (familyName.equals(srcFamily.getName())) {
+                // set the name to null so that it will be added as a fallback
+                srcFamily.clearName();
+                dst.getFamilies().add(srcFamily);
+                return;
+            }
+        }
+    }
+
+    /**
+     * Adds any font families in src that do not exist in dst
+     * @param src Source font config
+     * @param dst Destination font config
+     */
+    private static void addMissingFontFamilies(FontConfig src,
+            FontConfig dst) {
+        final int N = dst.getFamilies().size();
+        // add missing families
+        for (Family srcFamily : src.getFamilies()) {
+            boolean addFamily = true;
+            for (int i = 0; i < N && addFamily; i++) {
+                final Family dstFamily = dst.getFamilies().get(i);
+                final String dstFamilyName = dstFamily.getName();
+                if (dstFamilyName != null && dstFamilyName.equals(srcFamily.getName())) {
+                    addFamily = false;
+                    break;
+                }
+            }
+            if (addFamily) {
+                dst.getFamilies().add(srcFamily);
+            }
+        }
+    }
+
+    /**
+     * Adds any aliases in src that do not exist in dst
+     * @param src Source font config
+     * @param dst Destination font config
+     */
+    private static void addMissingFontAliases(FontConfig src,
+            FontConfig dst) {
+        final int N = dst.getAliases().size();
+        // add missing aliases
+        for (FontConfig.Alias alias : src.getAliases()) {
+            boolean addAlias = true;
+            for (int i = 0; i < N && addAlias; i++) {
+                final String dstAliasName = dst.getAliases().get(i).getName();
+                if (dstAliasName != null && dstAliasName.equals(alias.getName())) {
+                    addAlias = false;
+                    break;
+                }
+            }
+            if (addAlias) {
+                dst.getAliases().add(alias);
+            }
+        }
+    }
+
     /*
      * (non-Javadoc)
      *
@@ -924,18 +1000,41 @@ public class Typeface {
     private static void init() {
         // Load font config and initialize Minikin state
         File systemFontConfigLocation = getSystemFontConfigLocation();
-        File configFilename = new File(systemFontConfigLocation, FONTS_CONFIG);
+        File themeFontConfigLocation = getThemeFontConfigLocation();
+
+        File systemConfigFile = new File(systemFontConfigLocation, FONTS_CONFIG);
+        File themeConfigFile = new File(themeFontConfigLocation, FONTS_CONFIG);
+        File configFile = null;
+        File fontDir;
+
+        if (themeConfigFile.exists()) {
+            // /data/system/theme/fonts/ exits so use it and copy default fonts
+            configFile = themeConfigFile;
+            fontDir = getThemeFontDirLocation();
+        } else {
+            configFile = systemConfigFile;
+            fontDir = getSystemFontDirLocation();
+        }
+
         try {
-            FileInputStream fontsIn = new FileInputStream(configFilename);
-            FontConfig fontConfig = FontListParser.parse(fontsIn);
+            FontConfig fontConfig = FontListParser.parse(configFile,
+                    fontDir.getAbsolutePath());
+            FontConfig systemFontConfig = null;
+            if (configFile == themeConfigFile) {
+                systemFontConfig = FontListParser.parse(systemConfigFile,
+                        getSystemFontDirLocation().getAbsolutePath());
+                addFallbackFontsForFamilyName(systemFontConfig, fontConfig, SANS_SERIF_FAMILY_NAME);
+                addMissingFontFamilies(systemFontConfig, fontConfig);
+                addMissingFontAliases(systemFontConfig, fontConfig);
+            }
 
             Map<String, ByteBuffer> bufferForPath = new HashMap<String, ByteBuffer>();
 
             List<FontFamily> familyList = new ArrayList<FontFamily>();
             // Note that the default typeface is always present in the fallback list;
             // this is an enhancement from pre-Minikin behavior.
-            for (int i = 0; i < fontConfig.getFamilies().length; i++) {
-                FontConfig.Family f = fontConfig.getFamilies()[i];
+            for (int i = 0; i < fontConfig.getFamilies().size(); i++) {
+                FontConfig.Family f = fontConfig.getFamilies().get(i);
                 if (i == 0 || f.getName() == null) {
                     FontFamily family = makeFamilyFromParsed(f, bufferForPath);
                     if (family != null) {
@@ -947,9 +1046,9 @@ public class Typeface {
             setDefault(Typeface.createFromFamilies(sFallbackFonts));
 
             Map<String, Typeface> systemFonts = new HashMap<String, Typeface>();
-            for (int i = 0; i < fontConfig.getFamilies().length; i++) {
+            for (int i = 0; i < fontConfig.getFamilies().size(); i++) {
                 Typeface typeface;
-                FontConfig.Family f = fontConfig.getFamilies()[i];
+                FontConfig.Family f = fontConfig.getFamilies().get(i);
                 if (f.getName() != null) {
                     if (i == 0) {
                         // The first entry is the default typeface; no sense in
@@ -982,22 +1081,54 @@ public class Typeface {
             Log.w(TAG, "Didn't create default family (most likely, non-Minikin build)", e);
             // TODO: normal in non-Minikin case, remove or make error when Minikin-only
         } catch (FileNotFoundException e) {
-            Log.e(TAG, "Error opening " + configFilename, e);
+            Log.e(TAG, "Error opening " + configFile, e);
         } catch (IOException e) {
-            Log.e(TAG, "Error reading " + configFilename, e);
+            Log.e(TAG, "Error reading " + configFile, e);
         } catch (XmlPullParserException e) {
-            Log.e(TAG, "XML parse exception for " + configFilename, e);
+            Log.e(TAG, "XML parse exception for " + configFile, e);
         }
     }
 
+    /**
+     * Clears caches in java and skia.
+     * Skia will then reparse font config
+     * @hide
+     */
+    public static void recreateDefaults() {
+        sDynamicTypefaceCache.evictAll();
+        sSystemFontMap.clear();
+        sTypefaceCache.clear();
+        init();
+
+        DEFAULT_BOLD_INTERNAL = create((String) null, Typeface.BOLD);
+        SANS_SERIF_INTERNAL = create("sans-serif", 0);
+        SERIF_INTERNAL = create("serif", 0);
+        MONOSPACE_INTERNAL = create("monospace", 0);
+
+        DEFAULT.native_instance = DEFAULT_INTERNAL.native_instance;
+        DEFAULT_BOLD.native_instance = DEFAULT_BOLD_INTERNAL.native_instance;
+        SANS_SERIF.native_instance = SANS_SERIF_INTERNAL.native_instance;
+        SERIF.native_instance = SERIF_INTERNAL.native_instance;
+        MONOSPACE.native_instance = MONOSPACE_INTERNAL.native_instance;
+
+        sDefaults[2] = create((String) null, Typeface.ITALIC);
+        sDefaults[3] = create((String) null, Typeface.BOLD_ITALIC);
+    }
+
     static {
         init();
         // Set up defaults and typefaces exposed in public API
-        DEFAULT         = create((String) null, 0);
-        DEFAULT_BOLD    = create((String) null, Typeface.BOLD);
-        SANS_SERIF      = create("sans-serif", 0);
-        SERIF           = create("serif", 0);
-        MONOSPACE       = create("monospace", 0);
+        DEFAULT_INTERNAL         = create((String) null, 0);
+        DEFAULT_BOLD_INTERNAL    = create((String) null, Typeface.BOLD);
+        SANS_SERIF_INTERNAL      = create("sans-serif", 0);
+        SERIF_INTERNAL           = create("serif", 0);
+        MONOSPACE_INTERNAL       = create("monospace", 0);
+
+        DEFAULT         = new Typeface(DEFAULT_INTERNAL.native_instance);
+        DEFAULT_BOLD    = new Typeface(DEFAULT_BOLD_INTERNAL.native_instance);
+        SANS_SERIF      = new Typeface(SANS_SERIF_INTERNAL.native_instance);
+        SERIF           = new Typeface(SERIF_INTERNAL.native_instance);
+        MONOSPACE       = new Typeface(MONOSPACE_INTERNAL.native_instance);
 
         sDefaults = new Typeface[] {
             DEFAULT,
@@ -1012,6 +1143,18 @@ public class Typeface {
         return new File("/system/etc/");
     }
 
+    private static File getSystemFontDirLocation() {
+        return new File("/system/fonts/");
+    }
+
+    private static File getThemeFontConfigLocation() {
+        return new File("/data/system/theme/fonts/");
+    }
+
+    private static File getThemeFontDirLocation() {
+        return new File("/data/system/theme/fonts/");
+    }
+
     @Override
     protected void finalize() throws Throwable {
         try {
diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index df66d39b1ee..b553c671c75 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -607,6 +607,9 @@ public class ActivityManagerService extends IActivityManager.Stub
 
     private static final int NATIVE_DUMP_TIMEOUT_MS = 2000; // 2 seconds;
 
+    // System prop for refreshing font
+    private static final String PROP_REFRESH_FONT = "sys.refresh_font";
+
     /** All system services */
     SystemServiceManager mSystemServiceManager;
     AssistUtils mAssistUtils;
@@ -3968,6 +3971,13 @@ public class ActivityManagerService extends IActivityManager.Stub
                 mNativeDebuggingApp = null;
             }
 
+            // Check if zygote should refresh its fonts
+            boolean refreshFont = false;
+            if (SystemProperties.getBoolean(PROP_REFRESH_FONT, false)) {
+                SystemProperties.set(PROP_REFRESH_FONT, "false");
+                refreshFont = true;
+            }
+
             String invokeWith = null;
             if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
                 // Debuggable apps may include a wrapper script with their library directory.
@@ -4016,12 +4026,12 @@ public class ActivityManagerService extends IActivityManager.Stub
                 startResult = startWebView(entryPoint,
                         app.processName, uid, uid, gids, debugFlags, mountExternal,
                         app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,
-                        app.info.dataDir, null, entryPointArgs);
+                        app.info.dataDir, null, entryPointArgs, refreshFont);
             } else {
                 startResult = Process.start(entryPoint,
                         app.processName, uid, uid, gids, debugFlags, mountExternal,
                         app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,
-                        app.info.dataDir, invokeWith, entryPointArgs);
+                        app.info.dataDir, invokeWith, entryPointArgs, refreshFont);
             }
             checkTime(startTime, "startProcess: returned from zygote!");
             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
-- 
2.18.0

